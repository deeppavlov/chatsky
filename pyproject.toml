[tool.poetry]
name = "dff"
version = "0.6.2"
description = "Dialog Flow Framework is a free and open-source software stack for creating chatbots, released under the terms of Apache License 2.0."
license = "Apache-2.0"
authors = [
    "Denis Kuznetsov <kuznetsov.den.p@gmail.com>",
    "Roman Zlobin <RLKRo@proton.me>",
    "Aleksandr Sergeev <shveitsar215@gmail.com>",
    "Daniil Ignatiev <ruthenian8@gmail.com>",
]

readme = "README.md"
homepage = "https://deeppavlov.github.io/dialog_flow_framework/index.html"
repository = "https://github.com/deeppavlov/dialog_flow_framework"
documentation = "https://deeppavlov.github.io/dialog_flow_framework/reference.html"
keywords = ["chatbots"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
]



include = [
    { path = "CONTRIBUTING.md" },
    { path = "LICENSE" },
    { path = "README.md" },
    { path = "dff/context_storages/protocols.json" },
    { path = "dff/config/superset_dashboard" },
]
exclude = [
    { path = "makefile" },
    { path = "tests" },
    { path = "tutorials" },
    { path = "__pycache__" },
    { path = "*.py[co]" },
    { path = "docs" },
    { path = "scripts" },
    { path = "dff/utils/docker" },
    { path = "dff/utils/otel" },
]



[tool.poetry.urls]
"Getting Started" = "https://deeppavlov.github.io/dialog_flow_framework/get_started.html"
"Tutorials" = "https://deeppavlov.github.io/dialog_flow_framework/tutorials.html"
"User Guides" = "https://deeppavlov.github.io/dialog_flow_framework/user_guides.html"
"Examples" = "https://github.com/deeppavlov/dialog_flow_demo"



[tool.poetry.dependencies]
python = "^3.8.1,!=3.9.7"  # `streamlit` package does not support python 3.9.7, `flake8` package does not support python 3.8.0
pydantic = "^2.0.3"  # `pydantic` version more than 2 required
nest-asyncio = "*"
typing-extensions = "*"
wrapt = "1.15.0"
urllib3 = "<2.0"
colorama = "*"
ydb = { version = "*", optional = true }
six = { version = "*", optional = true }
tqdm = { version = "*", optional = true }
motor = { version = "*", optional = true }
redis = { version = "*", optional = true }
pandas = { version = "*", optional = true }
altair = { version = "*", optional = true }
asyncmy = { version = "*", optional = true }
asyncpg = { version = "*", optional = true }
pympler = { version = "*", optional = true }
aiofiles = { version = "*", optional = true }
humanize = { version = "*", optional = true }
aiosqlite = { version = "*", optional = true }
omegaconf = { version = "*", optional = true }
cryptography = { version = "*", optional = true }
requests = { version = "2.31.0", optional = true }
pytelegrambotapi = { version = "*", optional = true }
opentelemetry-instrumentation = { version = "*", optional = true }
sqlalchemy = { version = "*", extras = ["asyncio"], optional = true }
opentelemetry-exporter-otlp = { version = ">=1.20.0", optional = true }

[tool.poetry.extras]
json = ["aiofiles"]
pickle = ["aiofiles"]
sqlite = ["sqlalchemy", "aiosqlite"]
redis = ["redis"]
mongodb = ["motor"]
mysql = ["sqlalchemy", "asyncmy", "cryptography"]
postgresql = ["sqlalchemy", "asyncpg"]
ydb = ["ydb", "six"]
telegram = ["pytelegrambotapi"]
stats = ["opentelemetry-exporter-otlp", "opentelemetry-instrumentation", "requests", "tqdm", "omegaconf"]
benchmark = ["pympler", "humanize", "pandas", "altair", "tqdm"]


[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
flake8 = "6.1.0"
isort = "5.12.0"
black = "23.9.1"
mypy = "1.6.0"


[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
requests = "*"
idna = "3.4"
pytest = "7.4.0"
pytest-cov = "4.1.0"
pytest-asyncio = "0.21.0"
pytest-virtualenv = "1.7.0"
sniffio = "1.3.0"
h11 = "0.14.0"
aiochclient = ">=2.2.0"
httpx = ">=0.25.0"
sqlparse = "0.4.4"
jsonschema = "4.19.1"


[tool.poetry.group.devel]
optional = true

[tool.poetry.group.devel.dependencies]
python-on-whales = "0.64.3"
python-dotenv = "0.21.1"
poethepoet = { version = "0.24.2", extras = ["poetry_plugin"] }


[tool.poetry.group.tutorials]
optional = true

[tool.poetry.group.tutorials.dependencies]
flask = { version = "3.0.0", extras = ["async"] }
psutil = "5.9.5"
telethon = "1.31.0"
fastapi = "0.103.1"
uvicorn = "0.23.1"
websockets = "11.0.2"
locust = "2.17.0"
streamlit = "1.27.0"
streamlit-chat = "0.1.1"


[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "7.1.0"
nbsphinx = "0.9.2"
sphinx-favicon = "1.0.1"
sphinx-gallery = "0.14.0"
sphinx-copybutton = "0.5.2"
sphinxcontrib-katex = "0.9.0"
pydata-sphinx-theme = "0.14.1"
sphinxcontrib-apidoc = "0.4.0"
sphinxcontrib-httpdomain = "1.8.0"
sphinx-autodoc-typehints = "1.24.0"
jupytext = "1.15.0"
jupyter = "1.0.0"



[tool.poetry.scripts]
"dff.stats" = { callable = "dff.stats.__main__:main", extras = ["stats"] }



[tool.poe]
default_task_type = "script"

[tool.poe.tasks]
info = "scripts.misc:info"
lint = "scripts.codestyle:lint"
format = "scripts.codestyle:format"
clean_docs = "scripts.clean:clean_docs"
clean = "scripts.clean:clean"
test_no_cov = "scripts.test:test_no_cov"
test_no_deps = "scripts.test:test_no_deps"
test_all = "scripts.test:test_all"
docs = "scripts.doc:docs"



[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"



[tool.isort]
profile = "black"



[tool.pytest.ini_options]
addopts = "--strict-markers"
markers = [
    "docker: marks tests as requiring docker containers to work",
    "telegram: marks tests as requiring telegram client API token to work",
    "slow: marks tests as slow (taking more than a minute to complete)",
    "no_coverage: tests that either cannot run inside the `coverage` workflow or do not affect coverage stats",
    "all: reserved by allow-skip",
    "none: reserved by allow-skip",
]
