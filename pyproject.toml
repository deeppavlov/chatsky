[tool.poetry]
name = "dff"
version = "0.5.0"
description = "Dialog Flow Framework is a free and open-source software stack for creating chatbots, released under the terms of Apache License 2.0."
license = "Apache-2.0"
authors = [
    "Denis Kuznetsov <kuznetsov.den.p@gmail.com>",
]
maintainers = [
    "Roman Zlobin <email>",
    "Aleksandr Sergeev <email>",
    "Daniil Ignatiev <email>",
    "Aleksandr Sakharov <email>",
]

readme = "README.md"
homepage = "https://deeppavlov.github.io/dialog_flow_framework/"
repository = "https://github.com/deeppavlov/dialog_flow_framework"
documentation = "https://deeppavlov.github.io/dialog_flow_framework/reference.html"
keywords = ["chatbots"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
]



include = [
    { path = "CONTRIBUTING.md" },
    { path = "LICENSE" },
    { path = "README.md" },
    { path = "dff/context_storages/protocols.json" },
    { path = "dff/config/superset_dashboard" },
]
exclude = [
    { path = "makefile" },
    { path = "tests" },
    { path = "tutorials" },
    { path = "__pycache__" },
    { path = "*.py[co]" },
    { path = "docs" },
    { path = "scripts" },
]



[tool.poetry.urls]
"Tutorials" = "https://deeppavlov.github.io/dialog_flow_framework/tutorials.html"
# TODO: some else??



[tool.poetry.dependencies]
python = "^3.8.1,!=3.9.7"
pydantic = "^2.0.3"
nest-asyncio = "*"
typing-extensions = "*"
wrapt = "1.15.0"
urllib3 = "<2.0"
ydb = { version = "*", optional = true }
six = { version = "*", optional = true }
tqdm = { version = "*", optional = true }
motor = { version = "*", optional = true }
redis = { version = "*", optional = true }
idna = { version = "3.4", optional = true }
asyncmy = { version = "*", optional = true }
asyncpg = { version = "*", optional = true }
h11 = { version = "0.14.0", optional = true }
mypy = { version = "1.5.0", optional = true }
aiofiles = { version = "*", optional = true }
click = { version = "8.1.3", optional = true }
aiosqlite = { version = "*", optional = true }
omegaconf = { version = "*", optional = true }
black = { version = "23.9.1", optional = true }
isort = { version = "5.12.0", optional = true }
pytest = { version = "7.4.0", optional = true }
flake8 = { version = "6.1.0", optional = true }
psutil = { version = "5.9.5", optional = true }
sphinx = { version = "7.1.0", optional = true }
sniffio = { version = "1.3.0", optional = true }
jupyter = { version = "1.0.0", optional = true }
locust = { version = "2.16.1", optional = true }
uvicorn = { version = "0.23.1", optional = true }
nbsphinx = { version = "0.9.2", optional = true }
colorama = { version = "0.4.6", optional = true }
cryptography = { version = "*", optional = true }
httpx = { version = ">=0.25.0", optional = true }
sqlparse = { version = "0.4.4", optional = true }
fastapi = { version = "0.103.1", optional = true }
telethon = { version = "1.30.0", optional = true }
requests = { version = "2.31.0", optional = true }
jupytext = { version = "1.15.0", optional = true }
streamlit = { version = "1.27.0", optional = true }
pytest-cov = { version = "4.1.0", optional = true }
websockets = { version = "11.0.2", optional = true }
bump2version = { version = "1.0.1", optional = true }
pytelegrambotapi = { version = "*", optional = true }
streamlit-chat = { version = "0.1.1", optional = true}
aiochclient = { version = ">=2.2.0", optional = true }
python-dotenv = { version = "0.21.1", optional = true }
sphinx-favicon = { version = "1.0.1", optional = true }
sphinx-gallery = { version = "0.14.0", optional = true }
pytest-asyncio = { version = "0.21.0", optional = true }
pytest-virtualenv = { version = "1.7.0", optional = true }
python-on-whales = { version = "0.64.3", optional = true }
sphinx-copybutton = { version = "0.5.2", optional = true }
sphinxcontrib-katex = { version = "0.9.0", optional = true }
pydata-sphinx-theme = { version = "0.13.3", optional = true }
sphinxcontrib-apidoc = { version = "0.4.0", optional = true }
flask = { version = "2.3.2", extras=["async"], optional = true }
sphinxcontrib-httpdomain = { version = "1.8.0", optional = true }
sphinx-autodoc-typehints = { version = "1.24.0", optional = true }
opentelemetry-instrumentation = { version = "*", optional = true }
sqlalchemy = { version = "*", extras=["asyncio"], optional = true }
opentelemetry-exporter-otlp = { version = ">=1.20.0", optional = true }
jsonschema = { version = "4.17.3", optional = true }
pympler = { version = "*", optional = true }
humanize = { version = "*", optional = true }
pandas = { version = "*", optional = true }
altair = { version = "*", optional = true }

[tool.poetry.extras]
json = ["aiofiles"]
pickle = ["aiofiles"]
sqlite = ["sqlalchemy", "aiosqlite"]
redis = ["redis"]
mongodb = ["motor"]
mysql = ["sqlalchemy", "asyncmy", "cryptography"]
postgresql = ["sqlalchemy", "asyncpg"]
ydb = ["ydb", "six"]
telegram = ["pytelegrambotapi"]
full = ["aiofiles", "sqlalchemy", "aiosqlite", "redis", "motor", "asyncmy", "cryptography", "asyncpg", "ydb", "six", "pytelegrambotapi"]
tests = ["requests", "pytest", "pytest-cov", "pytest-asyncio", "pytest-virtualenv", "flake8", "click", "black", "isort", "idna", "sniffio", "h11", "aiochclient", "httpx", "sqlparse", "jsonschema"]
devel = ["colorama", "python-on-whales", "python-dotenv", "mypy", "bump2version"]
doc = ["requests", "sphinx", "pydata-sphinx-theme", "sphinxcontrib-apidoc", "sphinxcontrib-httpdomain", "sphinxcontrib-katex", "sphinx-favicon", "sphinx-copybutton", "sphinx-gallery", "sphinx-autodoc-typehints", "nbsphinx", "jupytext", "jupyter"]
tutorial = ["flask", "psutil", "telethon", "fastapi", "uvicorn", "websockets", "locust", "streamlit", "streamlit-chat"]
stats = ["opentelemetry-exporter-otlp", "opentelemetry-instrumentation", "requests", "tqdm", "omegaconf"]
benchmark = ["pympler", "humanize", "pandas", "altair", "tqdm"]



[tool.poetry.scripts]
help = { callable = "scripts.misc:help", extras = ["devel"] }
lint = { callable = "scripts.codestyle:lint", extras = ["tests", "devel"] }
format = { callable = "scripts.codestyle:format", extras = ["tests", "devel"] }
test_no_cov = { callable = "scripts.test:test_no_cov", extras = ["tests", "devel"] }
test_no_deps = { callable = "scripts.test:test_no_deps", extras = ["tests", "devel"] }
test_all = { callable = "scripts.test:test_all", extras = ["tests", "devel", "full", "tutorial", "stats", "benchmark"] }
docs = { callable = "scripts.doc:docs", extras = ["tests", "full", "doc", "devel", "stats", "benchmark"] }
pre_commit = { callable = "scripts.misc:pre_commit", extras = ["devel"] }
version_patch = { callable = "scripts.misc:version_patch", extras = ["devel"] }
version_minor = { callable = "scripts.misc:version_minor", extras = ["devel"] }
version_major = { callable = "scripts.misc:version_major", extras = ["devel"] }
clean_docs = { callable = "scripts.clean:clean_docs", extras = ["devel"] }
clean = { callable = "scripts.clean:clean", extras = ["devel"] }

"dff.stats" = { callable = "dff.stats.__main__:main", extras = ["stats"] }



[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"



[tool.isort]
profile = "black"



[tool.pytest.ini_options]
addopts = "--strict-markers"
markers = [
    "docker: marks tests as requiring docker containers to work",
    "telegram: marks tests as requiring telegram client API token to work",
    "slow: marks tests as slow (taking more than a minute to complete)",
    "no_coverage: tests that either cannot run inside the `coverage` workflow or do not affect coverage stats",
    "all: reserved by allow-skip",
    "none: reserved by allow-skip",
]
