[tool.poetry]
name = "chatsky"
version = "0.9.0"
description = "Chatsky is a free and open-source software stack for creating chatbots, released under the terms of Apache License 2.0."
license = "Apache-2.0"
authors = [
    "Denis Kuznetsov <kuznetsov.den.p@gmail.com>",
    "Roman Zlobin <RLKRo@proton.me>",
    "Aleksandr Sergeev <shveitsar215@gmail.com>",
    "Daniil Ignatiev <ruthenian8@gmail.com>",
]

readme = "README.md"
homepage = "https://github.com/deeppavlov/chatsky"
documentation = "https://deeppavlov.github.io/chatsky/"
keywords = ["chatbots"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
]



include = [
    { path = "CONTRIBUTING.md" },
    { path = "chatsky/" },
]
exclude = [
    { path = "tests" },
    { path = "scripts" },
]



[tool.poetry.urls]
"Project Template" = "https://github.com/deeppavlov/chatsky-template"



[tool.poetry.dependencies]
python = "^3.8.1,!=3.9.7"  # `streamlit` package does not support python 3.9.7, `flake8` package does not support python 3.8.0
pydantic = ">=2.0"  # `pydantic` version more than 2 required
nest-asyncio = "*"
typing-extensions = "*"
eval_type_backport = "*"
wrapt = "*"
colorama = "*"
ydb = { version = "*", optional = true }
six = { version = "*", optional = true }
tqdm = { version = "*", optional = true }
motor = { version = "*", optional = true }
redis = { version = "*", optional = true }
pandas = { version = "*", optional = true }
altair = { version = "*", optional = true }
asyncmy = { version = "*", optional = true }
asyncpg = { version = "*", optional = true }
pympler = { version = "*", optional = true }
aiofiles = { version = "*", optional = true }
humanize = { version = "*", optional = true }
aiosqlite = { version = "*", optional = true }
omegaconf = { version = "*", optional = true }
cryptography = { version = "*", optional = true }
requests = { version = "*", optional = true }
python-telegram-bot = { version = "~=21.3", extras = ["all"], optional = true }
opentelemetry-instrumentation = { version = "*", optional = true }
sqlalchemy = { version = "*", extras = ["asyncio"], optional = true }
opentelemetry-exporter-otlp = { version = ">=1.20.0", optional = true }  # log body serialization is required
pyyaml = { version = "*", optional = true }

[tool.poetry.extras]
json = ["aiofiles"]
pickle = ["aiofiles"]
sqlite = ["sqlalchemy", "aiosqlite"]
redis = ["redis"]
mongodb = ["motor"]
mysql = ["sqlalchemy", "asyncmy", "cryptography"]
postgresql = ["sqlalchemy", "asyncpg"]
ydb = ["ydb", "six"]
telegram = ["python-telegram-bot"]
stats = ["opentelemetry-exporter-otlp", "opentelemetry-instrumentation", "requests", "tqdm", "omegaconf"]
benchmark = ["pympler", "humanize", "pandas", "altair", "tqdm"]
yaml = ["pyyaml"]


[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
flake8 = "*"
isort = "*"
black = "*"
mypy = "*"


[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
requests = "*"
idna = "*"
pytest = "*"
pytest-cov = "*"
coverage = { version = "!=7.3.3", extras = ["toml"] }
# Coverage 7.3.3 breaks pragma: no cover -- https://github.com/nedbat/coveragepy/issues/1713
pytest-asyncio = "*"
pytest-virtualenv = "*"
sniffio = "*"
h11 = "*"
aiochclient = "*"
httpx = "*"
sqlparse = "*"
jsonschema = "*"


[tool.poetry.group.devel]
optional = false

[tool.poetry.group.devel.dependencies]
urllib3 = "<2.0"  # ensure chatsky doesn't update urllib which breaks poetry
python-on-whales = "*"
python-dotenv = "*"
poethepoet = { version = "*", extras = ["poetry_plugin"] }


[tool.poetry.group.tutorials]
optional = true

[tool.poetry.group.tutorials.dependencies]
flask = { version = "*", extras = ["async"] }
psutil = "*"
telethon = "*"
fastapi = "*"
uvicorn = "*"
websockets = "*"
locust = "*"
streamlit = "*"
streamlit-chat = "*"


[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "*"
nbsphinx = "*"
sphinx-favicon = "*"
sphinx-gallery = "*"
sphinx-copybutton = "*"
sphinxcontrib-katex = "*"
pydata-sphinx-theme = "*"
sphinxcontrib-apidoc = "*"
sphinxcontrib-httpdomain = "*"
sphinx-autodoc-typehints = "*"
jupytext = "*"
jupyter = "*"



[tool.poetry.scripts]
"chatsky.stats" = { callable = "chatsky.stats.__main__:main", extras = ["stats"] }



[tool.poe]
default_task_type = "script"

[tool.poe.tasks]
info = "scripts.misc:info"
flake = "scripts.codestyle:_run_flake"
black = "scripts.codestyle:_run_black(modify=False)"
lint.sequence = ["flake", "black"]
lint.ignore_fail = "return_non_zero"
format = "scripts.codestyle:_run_black(modify=True)"
clean_docs = "scripts.clean:clean_docs"
clean = "scripts.clean:clean"
quick_test = "scripts.test:quick_test"
quick_test_coverage = "scripts.test:quick_test_coverage"
test_no_cov = "scripts.test:test_no_cov"
test_no_deps = "scripts.test:test_no_deps"
test_all = "scripts.test:test_all"
docs = "scripts.doc:docs"



[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"



[tool.isort]
profile = "black"



[tool.pytest.ini_options]
addopts = "--strict-markers"
markers = [
    "docker: marks tests as requiring docker containers to work",
    "slow: marks tests as slow (taking more than a minute to complete)",
    "no_coverage: tests that either cannot run inside the `coverage` workflow or do not affect coverage stats",
    "all: reserved by allow-skip",
    "none: reserved by allow-skip",
]
asyncio_mode = "auto"


[tool.coverage.run]
concurrency = [
    "thread",
    "greenlet",
    ]


[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    ]
