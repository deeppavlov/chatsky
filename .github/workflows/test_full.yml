name: test_full

on:
  push:
    branches:
    - dev
    - master
    - test/**
  pull_request:
    branches:
    - dev
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/master' }}

jobs:
  test_full:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [macOS-latest, windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Build images
        if: matrix.os == 'ubuntu-latest'
        run: |
          make docker_up

      - name: set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[test_full]
        shell: bash

      - name: run pytest
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_API_ID: ${{ secrets.TG_API_ID }}
          TG_API_HASH: ${{ secrets.TG_API_HASH }}
          TG_BOT_USERNAME: ${{ secrets.TG_BOT_USERNAME }}
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              source <(cat .env_file | sed 's/=/=/' | sed 's/^/export /')
              pytest --tb=long -vv --cache-clear --no-cov --allow-skip=telegram tests/
          else
              pytest -m "not docker" --tb=long -vv --cache-clear --no-cov --allow-skip=telegram,docker tests/
          fi
        shell: bash
  test_no_deps:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4

      - name: Build images
        run: |
          make docker_up

      - name: set up python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[tests]
        shell: bash

      - name: run pytest
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_API_ID: ${{ secrets.TG_API_ID }}
          TG_API_HASH: ${{ secrets.TG_API_HASH }}
          TG_BOT_USERNAME: ${{ secrets.TG_BOT_USERNAME }}
        run: |
          source <(cat .env_file | sed 's/=/=/' | sed 's/^/export /')
          pytest --tb=long -vv --cache-clear --no-cov --allow-skip=all tests/
        shell: bash
