digraph {
	graph [compound=true,
		fontname="Helvetica,Arial,sans-serif",
		overlap=ipsep,
		splines=spline
	];
	node [fillcolor="#ffffffbf",
		fontname="Helvetica,Arial,sans-serif",
		shape=box,
		style="rounded, filled"
	];
	subgraph "cluster_'greeting_flow'" {
		graph [color="#96b0af",
			label=GREETING_FLOW,
			style="rounded, filled"
		];
		"('NODE', \"'greeting_flow'\", \"'node1'\")"	[label=<<table border="0" cellborder="0" cellspacing="12" cellpadding="0"><tr><td> <br align="left" /></td><td><b>NODE1</b></td><td> <br align="right" /></td></tr><hr/><tr><td><br align="left" /> <br align="left" /></td><td><b>Transitions</b></td><td> <br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="('global_flow', 'fallback_node', 0.1)">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('how are you')</td><td port="'node2'">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('next\\b'), cnd.has_last_labels(labels=[('music_flow', i) for i in ['node2', 'node3']])])</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('repeat', re.I), cnd.negation(cnd.has_last_labels(flow_labels=['global_flow']))])</td><td port="repeat">)<br align="right" /></td></tr></table>>];
		"('NODE', \"'greeting_flow'\", \"'node2'\")"	[label=<<table border="0" cellborder="0" cellspacing="12" cellpadding="0"><tr><td> <br align="left" /></td><td><b>NODE2</b></td><td> <br align="right" /></td></tr><hr/><tr><td><br align="left" /> <br align="left" /></td><td><b>Transitions</b></td><td> <br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('talk about music')</td><td port="('music_flow', 'node1')">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('next\\b'), cnd.has_last_labels(labels=[('music_flow', i) for i in ['node2', 'node3']])])</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('talk about')</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('repeat', re.I), cnd.negation(cnd.has_last_labels(flow_labels=['global_flow']))])</td><td port="repeat">)<br align="right" /></td></tr></table>>];
		"('NODE', \"'greeting_flow'\", \"'node3'\")"	[label=<<table border="0" cellborder="0" cellspacing="12" cellpadding="0"><tr><td> <br align="left" /></td><td><b>NODE3</b></td><td> <br align="right" /></td></tr><hr/><tr><td><br align="left" /> <br align="left" /></td><td><b>Transitions</b></td><td> <br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('next\\b'), cnd.has_last_labels(labels=[('music_flow', i) for i in ['node2', 'node3']])])</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('bye')</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('repeat', re.I), cnd.negation(cnd.has_last_labels(flow_labels=['global_flow']))])</td><td port="repeat">)<br align="right" /></td></tr></table>>];
		"('NODE', \"'greeting_flow'\", \"'node4'\")"	[label=<<table border="0" cellborder="0" cellspacing="12" cellpadding="0"><tr><td> <br align="left" /></td><td><b>NODE4</b></td><td> <br align="right" /></td></tr><hr/><tr><td><br align="left" /> <br align="left" /></td><td><b>Transitions</b></td><td> <br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('hi|hello', re.IGNORECASE)</td><td port="'node1'">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('next\\b'), cnd.has_last_labels(labels=[('music_flow', i) for i in ['node2', 'node3']])])</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('repeat', re.I), cnd.negation(cnd.has_last_labels(flow_labels=['global_flow']))])</td><td port="repeat">)<br align="right" /></td></tr></table>>];
	}
	subgraph "cluster_'music_flow'" {
		graph [color="#c6ae82",
			label=MUSIC_FLOW,
			style="rounded, filled"
		];
		"('NODE', \"'music_flow'\", \"'node1'\")"	[label=<<table border="0" cellborder="0" cellspacing="12" cellpadding="0"><tr><td> <br align="left" /></td><td><b>NODE1</b></td><td> <br align="right" /></td></tr><hr/><tr><td><br align="left" /> <br align="left" /></td><td><b>Transitions</b></td><td> <br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('next\\b'), cnd.has_last_labels(labels=[('music_flow', i) for i in ['node2', 'node3']])])</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('yes|yep|ok', re.IGNORECASE)</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('repeat', re.I), cnd.negation(cnd.has_last_labels(flow_labels=['global_flow']))])</td><td port="repeat">)<br align="right" /></td></tr></table>>];
		"('NODE', \"'music_flow'\", \"'node2'\")"	[label=<<table border="0" cellborder="0" cellspacing="12" cellpadding="0"><tr><td> <br align="left" /></td><td><b>NODE2</b></td><td> <br align="right" /></td></tr><hr/><tr><td><br align="left" /> <br align="left" /></td><td><b>Transitions</b></td><td> <br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('next\\b'), cnd.has_last_labels(labels=[('music_flow', i) for i in ['node2', 'node3']])])</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('next', re.IGNORECASE)</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('repeat', re.I), cnd.negation(cnd.has_last_labels(flow_labels=['global_flow']))])</td><td port="repeat">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('repeat', re.IGNORECASE)</td><td port="repeat">)<br align="right" /></td></tr></table>>];
		"('NODE', \"'music_flow'\", \"'node3'\")"	[label=<<table border="0" cellborder="0" cellspacing="12" cellpadding="0"><tr><td> <br align="left" /></td><td><b>NODE3</b></td><td> <br align="right" /></td></tr><hr/><tr><td><br align="left" /> <br align="left" /></td><td><b>Transitions</b></td><td> <br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('next\\b'), cnd.has_last_labels(labels=[('music_flow', i) for i in ['node2', 'node3']])])</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('next', re.IGNORECASE)</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('repeat', re.I), cnd.negation(cnd.has_last_labels(flow_labels=['global_flow']))])</td><td port="repeat">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('repeat', re.IGNORECASE)</td><td port="repeat">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('back', re.IGNORECASE)</td><td port="backward">)<br align="right" /></td></tr></table>>];
		"('NODE', \"'music_flow'\", \"'node4'\")"	[label=<<table border="0" cellborder="0" cellspacing="12" cellpadding="0"><tr><td> <br align="left" /></td><td><b>NODE4</b></td><td> <br align="right" /></td></tr><hr/><tr><td><br align="left" /> <br align="left" /></td><td><b>Transitions</b></td><td> <br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('next\\b'), cnd.has_last_labels(labels=[('music_flow', i) for i in ['node2', 'node3']])])</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('repeat', re.I), cnd.negation(cnd.has_last_labels(flow_labels=['global_flow']))])</td><td port="repeat">)<br align="right" /></td></tr></table>>];
	}
	subgraph "cluster_'global_flow'" {
		graph [color="#f78378",
			label=GLOBAL_FLOW,
			style="rounded, filled"
		];
		"('NODE', \"'global_flow'\", \"'fallback_node'\")"	[label=<<table border="0" cellborder="0" cellspacing="12" cellpadding="0"><tr><td> <br align="left" /></td><td><b>FALLBACK_NODE</b></td><td> <br align="right" /></td></tr><hr/><tr><td><br align="left" /> <br align="left" /></td><td><b>Transitions</b></td><td> <br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('talk about music')</td><td port="('music_flow', 'node1')">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('hi|hello', re.IGNORECASE)</td><td port="('greeting_flow', 'node1')">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('repeat', re.I), cnd.negation(cnd.has_last_labels(flow_labels=['global_flow']))])</td><td port="repeat">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="repeat">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('next\\b'), cnd.has_last_labels(labels=[('music_flow', i) for i in ['node2', 'node3']])])</td><td port="forward">)<br align="right" /></td></tr></table>>];
		"('NODE', \"'global_flow'\", \"'start_node'\")"	[label=<<table border="0" cellborder="0" cellspacing="12" cellpadding="0"><tr><td> <br align="left" /></td><td><b>START_NODE</b></td><td> <br align="right" /></td></tr><hr/><tr><td><br align="left" /> <br align="left" /></td><td><b>Transitions</b></td><td> <br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('talk about music')</td><td port="('music_flow', 'node1')">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.regexp('hi|hello', re.IGNORECASE)</td><td port="('greeting_flow', 'node1')">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="'fallback_node'">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.true()</td><td port="to_fallback">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('next\\b'), cnd.has_last_labels(labels=[('music_flow', i) for i in ['node2', 'node3']])])</td><td port="forward">)<br align="right" /></td></tr><tr><td>(<br align="left" /></td><td>cnd.all([cnd.regexp('repeat', re.I), cnd.negation(cnd.has_last_labels(flow_labels=['global_flow']))])</td><td port="repeat">)<br align="right" /></td></tr></table>>];
	}
	"('NODE', \"'greeting_flow'\", \"'node1'\")":repeat -> "('NODE', \"'greeting_flow'\", \"'node1'\")";
	"('NODE', \"'greeting_flow'\", \"'node1'\")":"('global_flow', 'fallback_node', 0.1)" -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'greeting_flow'\", \"'node1'\")":to_fallback -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'greeting_flow'\", \"'node1'\")":"'node2'" -> "('NODE', \"'greeting_flow'\", \"'node2'\")";
	"('NODE', \"'greeting_flow'\", \"'node1'\")":forward -> "('NODE', \"'greeting_flow'\", \"'node2'\")";
	"('NODE', \"'global_flow'\", \"'fallback_node'\")":"('greeting_flow', 'node1')" -> "('NODE', \"'greeting_flow'\", \"'node1'\")";
	"('NODE', \"'global_flow'\", \"'fallback_node'\")":to_fallback -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'global_flow'\", \"'fallback_node'\")":repeat -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'global_flow'\", \"'fallback_node'\")":"('music_flow', 'node1')" -> "('NODE', \"'music_flow'\", \"'node1'\")";
	"('NODE', \"'global_flow'\", \"'fallback_node'\")":forward -> "('NODE', \"'global_flow'\", \"'start_node'\")";
	"('NODE', \"'greeting_flow'\", \"'node2'\")":to_fallback -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'greeting_flow'\", \"'node2'\")":repeat -> "('NODE', \"'greeting_flow'\", \"'node2'\")";
	"('NODE', \"'greeting_flow'\", \"'node2'\")":"('music_flow', 'node1')" -> "('NODE', \"'music_flow'\", \"'node1'\")";
	"('NODE', \"'greeting_flow'\", \"'node2'\")":forward -> "('NODE', \"'greeting_flow'\", \"'node3'\")";
	"('NODE', \"'music_flow'\", \"'node1'\")":to_fallback -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'music_flow'\", \"'node1'\")":repeat -> "('NODE', \"'music_flow'\", \"'node1'\")";
	"('NODE', \"'music_flow'\", \"'node1'\")":forward -> "('NODE', \"'music_flow'\", \"'node2'\")";
	"('NODE', \"'music_flow'\", \"'node2'\")":to_fallback -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'music_flow'\", \"'node2'\")":repeat -> "('NODE', \"'music_flow'\", \"'node2'\")";
	"('NODE', \"'music_flow'\", \"'node2'\")":forward -> "('NODE', \"'music_flow'\", \"'node3'\")";
	"('NODE', \"'global_flow'\", \"'start_node'\")":"('greeting_flow', 'node1')" -> "('NODE', \"'greeting_flow'\", \"'node1'\")";
	"('NODE', \"'global_flow'\", \"'start_node'\")":"'fallback_node'" -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'global_flow'\", \"'start_node'\")":to_fallback -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'global_flow'\", \"'start_node'\")":forward -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'global_flow'\", \"'start_node'\")":"('music_flow', 'node1')" -> "('NODE', \"'music_flow'\", \"'node1'\")";
	"('NODE', \"'global_flow'\", \"'start_node'\")":repeat -> "('NODE', \"'global_flow'\", \"'start_node'\")";
	"('NODE', \"'greeting_flow'\", \"'node3'\")":to_fallback -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'greeting_flow'\", \"'node3'\")":repeat -> "('NODE', \"'greeting_flow'\", \"'node3'\")";
	"('NODE', \"'greeting_flow'\", \"'node3'\")":forward -> "('NODE', \"'greeting_flow'\", \"'node4'\")";
	"('NODE', \"'greeting_flow'\", \"'node4'\")":"'node1'" -> "('NODE', \"'greeting_flow'\", \"'node1'\")";
	"('NODE', \"'greeting_flow'\", \"'node4'\")":forward -> "('NODE', \"'greeting_flow'\", \"'node1'\")";
	"('NODE', \"'greeting_flow'\", \"'node4'\")":to_fallback -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'greeting_flow'\", \"'node4'\")":repeat -> "('NODE', \"'greeting_flow'\", \"'node4'\")";
	"('NODE', \"'music_flow'\", \"'node3'\")":to_fallback -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'music_flow'\", \"'node3'\")":backward -> "('NODE', \"'music_flow'\", \"'node2'\")";
	"('NODE', \"'music_flow'\", \"'node3'\")":repeat -> "('NODE', \"'music_flow'\", \"'node3'\")";
	"('NODE', \"'music_flow'\", \"'node3'\")":forward -> "('NODE', \"'music_flow'\", \"'node4'\")";
	"('NODE', \"'music_flow'\", \"'node4'\")":to_fallback -> "('NODE', \"'global_flow'\", \"'fallback_node'\")";
	"('NODE', \"'music_flow'\", \"'node4'\")":forward -> "('NODE', \"'music_flow'\", \"'node1'\")";
	"('NODE', \"'music_flow'\", \"'node4'\")":repeat -> "('NODE', \"'music_flow'\", \"'node4'\")";
}
